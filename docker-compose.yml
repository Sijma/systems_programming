version: '3'
services:
  postgres:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app-network
    environment:
      POSTGRES_USER: coupon_recommendation_system
      POSTGRES_PASSWORD: Xq8@SHF0S1&sM7v3
      POSTGRES_DB: betting_recommendation_system
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  kafka:
    image: bitnami/kafka:latest
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app-network
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'

  init-kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic event --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic coupon --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic statistics --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  kafka_consumer:
    image: python:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    networks:
      - app-network
    volumes:
      - ./requirements.txt:/requirements.txt
      - ./kafka_consumer.py:/kafka_consumer.py
      - ./database.py:/database.py
      - ./schemas.py:/schemas.py
    command: sh -c "pip install -r requirements.txt && python -u kafka_consumer.py"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: coupon_recommendation_system
      POSTGRES_PASSWORD: Xq8@SHF0S1&sM7v3
      POSTGRES_DB: betting_recommendation_system
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      SO_REUSEPORT: 1

  user_generator:
    image: python:latest
    restart: always
    depends_on:
      kafka_consumer:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./kafka_code/generator_requirements.txt:/generator_requirements.txt
      - ./kafka_code/user_generator.py:/user_generator.py
    command: sh -c "pip install -r generator_requirements.txt && python -u user_generator.py"
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092

  event_generator:
    image: python:latest
    restart: always
    depends_on:
      kafka_consumer:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./kafka_code/generator_requirements.txt:/generator_requirements.txt
      - ./kafka_code/event_generator.py:/event_generator.py
    command: sh -c "pip install -r generator_requirements.txt && python -u event_generator.py"
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092

  coupon_generator:
    image: python:latest
    restart: always
    depends_on:
      event_generator:
        condition: service_started
      kafka_consumer:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./kafka_code/generator_requirements.txt:/generator_requirements.txt
      - ./kafka_code/coupon_generator.py:/coupon_generator.py
      - ./database.py:/database.py
    command: sh -c "pip install -r generator_requirements.txt && python -u coupon_generator.py"
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: coupon_recommendation_system
      POSTGRES_PASSWORD: Xq8@SHF0S1&sM7v3
      POSTGRES_DB: betting_recommendation_system

  statistics_generator:
    image: python:latest
    restart: always
    depends_on:
      event_generator:
        condition: service_started
      kafka_consumer:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./kafka_code/generator_requirements.txt:/generator_requirements.txt
      - ./kafka_code/statistics_generator.py:/statistics_generator.py
      - ./database.py:/database.py
    command: sh -c "pip install -r generator_requirements.txt && python -u statistics_generator.py"
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: coupon_recommendation_system
      POSTGRES_PASSWORD: Xq8@SHF0S1&sM7v3
      POSTGRES_DB: betting_recommendation_system


  tests:
      build:
        context: ./tests
      stdin_open: true
      tty: true
      depends_on:
        postgres:
          condition: service_healthy
      volumes:
        - .:/app
        - ./tests:/app/tests
      networks:
        - app-network

  app:
    build: .
    restart: always
    networks:
      - app-network
    stop_signal: SIGINT
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      tests:
        condition: service_completed_successfully

    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: coupon_recommendation_system
      POSTGRES_PASSWORD: Xq8@SHF0S1&sM7v3
      POSTGRES_DB: betting_recommendation_system
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092

networks:
  app-network:
    driver: bridge